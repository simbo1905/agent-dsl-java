name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    name: Build with Java ${{ matrix.java }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: [24]
        # Future expansion:
        # java: [24, 25, 26]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'oracle'
        # Alternative distributions that support EA builds:
        # distribution: 'zulu'
        # distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Cache mvnd
      uses: actions/cache@v4
      with:
        path: ~/.m2/mvnd
        key: ${{ runner.os }}-mvnd-${{ matrix.java }}
        restore-keys: |
          ${{ runner.os }}-mvnd-
          
    - name: Install mvnd (Unix-like)
      if: runner.os != 'Windows'
      run: |
        if ! command -v mvnd &> /dev/null; then
          echo "Installing mvnd..."
          curl -fsSL https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-${{ runner.os == 'macOS' && 'darwin-amd64' || 'linux-amd64' }}.tar.gz | tar xz -C ~/.m2
          echo "$HOME/.m2/maven-mvnd-1.0.2-${{ runner.os == 'macOS' && 'darwin-amd64' || 'linux-amd64' }}/bin" >> $GITHUB_PATH
        fi
        
    - name: Install mvnd (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (-not (Get-Command mvnd -ErrorAction SilentlyContinue)) {
          Write-Host "Installing mvnd..."
          Invoke-WebRequest -Uri "https://github.com/apache/maven-mvnd/releases/download/1.0.2/maven-mvnd-1.0.2-windows-amd64.zip" -OutFile "mvnd.zip"
          Expand-Archive -Path "mvnd.zip" -DestinationPath "$env:USERPROFILE\.m2"
          echo "$env:USERPROFILE\.m2\maven-mvnd-1.0.2-windows-amd64\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        }
        
    - name: Build with mvnd
      run: |
        if command -v mvnd &> /dev/null 2>&1 || Get-Command mvnd -ErrorAction SilentlyContinue; then
          echo "Building with mvnd..."
          mvnd clean compile
        else
          echo "Falling back to mvn..."
          mvn clean compile
        fi
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}
      
    - name: Run tests with mvnd
      run: |
        if command -v mvnd &> /dev/null 2>&1 || Get-Command mvnd -ErrorAction SilentlyContinue; then
          echo "Testing with mvnd..."
          mvnd test
        else
          echo "Falling back to mvn..."
          mvn test
        fi
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}
      
    - name: Generate test report
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: Test Results - ${{ matrix.os }} - Java ${{ matrix.java }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-java${{ matrix.java }}
        path: target/surefire-reports/
      
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: 24
        distribution: 'oracle'
        
    - name: Check for TODO comments
      run: |
        if grep -r "TODO" --include="*.java" src/; then
          echo "::warning::Found TODO comments in code"
        fi
        
    - name: Check for debugging code
      run: |
        if grep -r "System.out.println" --include="*.java" src/; then
          echo "::warning::Found System.out.println in code - use proper logging"
          exit 1
        fi
        
    - name: Verify no LATEST versions
      run: |
        if grep -i "LATEST" pom.xml; then
          echo "::error::Found LATEST version in pom.xml - use specific versions"
          exit 1
        fi